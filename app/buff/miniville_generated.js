// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var MiniVille = MiniVille || {};

/**
 * @const
 * @namespace
 */
MiniVille.Dumb = MiniVille.Dumb || {};

/**
 * @constructor
 */
MiniVille.Dumb.Notes = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MiniVille.Dumb.Notes}
 */
MiniVille.Dumb.Notes.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MiniVille.Dumb.Notes=} obj
 * @returns {MiniVille.Dumb.Notes}
 */
MiniVille.Dumb.Notes.getRootAsNotes = function(bb, obj) {
  return (obj || new MiniVille.Dumb.Notes).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
MiniVille.Dumb.Notes.prototype.content = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MiniVille.Dumb.Notes.startNotes = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} contentOffset
 */
MiniVille.Dumb.Notes.addContent = function(builder, contentOffset) {
  builder.addFieldOffset(0, contentOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MiniVille.Dumb.Notes.endNotes = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
MiniVille.Dumb.Notes.finishNotesBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.MiniVille = MiniVille;
